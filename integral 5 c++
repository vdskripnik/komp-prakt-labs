#include <iostream>
#include <cmath>
#include <iomanip>

double f(double x) {
    return 1 / (x * sqrt(3 * x * x - 2 * x - 1));
}

// Метод прямоугольников
double rectangleMethod(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = 0.0;
    for (int i = 0; i < n; ++i) {
        sum += f(a + i * h);
    }
    return sum * h;
}

// Метод трапеций
double trapezoidalMethod(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = 0.5 * (f(a) + f(b));
    for (int i = 1; i < n; ++i) {
        sum += f(a + i * h);
    }
    return sum * h;
}

// Метод Симпсона
double simpsonMethod(double a, double b, int n) {
    if (n % 2 != 0) n++; // n должно быть четным
    double h = (b - a) / n;
    double sum = f(a) + f(b);
    for (int i = 1; i < n; i += 2) {
        sum += 4 * f(a + i * h);
    }
    for (int i = 2; i < n - 1; i += 2) {
        sum += 2 * f(a + i * h);
    }
    return sum * h / 3;
}

int main() {
    double a = 1.0, b = 2.0;
    int n = 1000000; // начальное количество разбиений
    double result;

    // Проверка на расходимость
    try {
        result = rectangleMethod(a, b, n);
        std::cout << "Метод прямоугольников: " << std::setprecision(10) << result << std::endl;
    } catch (...) {
        std::cout << "Метод прямоугольников: расходимость" << std::endl;
    }

    try {
        result = trapezoidalMethod(a, b, n);
        std::cout << "Метод трапеций: " << std::setprecision(10) << result << std::endl;
    } catch (...) {
        std::cout << "Метод трапеций: расходимость" << std::endl;
    }

    try {
        result = simpsonMethod(a, b, n);
        std::cout << "Метод Симпсона: " << std::setprecision(10) << result << std::endl;
    } catch (...) {
        std::cout << "Метод Симпсона: расходимость" << std::endl;
    }

    return 0;
}
