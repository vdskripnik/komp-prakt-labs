#include <iostream>
#include <cmath>
#include <iomanip>

double f(double x, double a, double b) {
    return exp(-a * x) * cos(b * x);
}

double integrate_rectangles(double a, double b, double L, int n) {
    double h = L / n;
    double sum = 0.0;
    for (int i = 0; i < n; ++i) {
        sum += f(i * h, a, b);
    }
    return sum * h;
}

double integrate_trapezoids(double a, double b, double L, int n) {
    double h = L / n;
    double sum = (f(0, a, b) + f(L, a, b)) / 2.0;
    for (int i = 1; i < n; ++i) {
        sum += f(i * h, a, b);
    }
    return sum * h;
}

double integrate_simpson(double a, double b, double L, int n) {
    if (n % 2 != 0) n++; // n должно быть четным
    double h = L / n;
    double sum = f(0, a, b) + f(L, a, b);
    for (int i = 1; i < n; ++i) {
        if (i % 2 == 0) {
            sum += 2 * f(i * h, a, b);
        } else {
            sum += 4 * f(i * h, a, b);
        }
    }
    return sum * h / 3.0;
}

int main() {
    double a = 1.0; // Задайте значение a > 0
    double b = 1.0; // Задайте значение b > 0
    double L = 10.0; // Начальное значение верхнего предела
    double precision = 1e-6;
    int n = 1000; // Начальное количество разбиений
    double prev_result;

    // Метод прямоугольников
    do {
        prev_result = integrate_rectangles(a, b, L, n);
        L *= 2; // Увеличиваем L
    } while (fabs(integrate_rectangles(a, b, L, n) - prev_result) > precision);
    std::cout << "Rectangle method result: " << std::setprecision(10) << prev_result << std::endl;

    // Метод трапеций
    L = 10.0; // Сброс значения L
    do {
        prev_result = integrate_trapezoids(a, b, L, n);
        L *= 2; // Увеличиваем L
    } while (fabs(integrate_trapezoids(a, b, L, n) - prev_result) > precision);
    std::cout << "Trapezoid method result: " << std::setprecision(10) << prev_result << std::endl;

    // Метод Симпсона
    L = 10.0; // Сброс значения L
    do {
        prev_result = integrate_simpson(a, b, L, n);
        L *= 2; // Увеличиваем L
    } while (fabs(integrate_simpson(a, b, L, n) - prev_result) > precision);
    std::cout << "Simpson method result: " << std::setprecision(10) << prev_result << std::endl;

    return 0;
}
