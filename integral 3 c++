#include <iostream>
#include <cmath>
#include <iomanip>

const double EPSILON = 1e-6;

// Функция под интегралом
double f(double x) {
    return (1 / (x * x)) * sin(1 / x);
}

// Метод прямоугольников
double rectangleMethod(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = 0.0;
    for (int i = 0; i < n; ++i) {
        sum += f(a + i * h);
    }
    return sum * h;
}

// Метод трапеций
double trapezoidMethod(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = (f(a) + f(b)) / 2.0;
    for (int i = 1; i < n; ++i) {
        sum += f(a + i * h);
    }
    return sum * h;
}

// Метод Симпсона
double simpsonMethod(double a, double b, int n) {
    if (n % 2 != 0) n++; // n должно быть четным
    double h = (b - a) / n;
    double sum = f(a) + f(b);
    
    for (int i = 1; i < n; i += 2) {
        sum += 4 * f(a + i * h);
    }
    for (int i = 2; i < n - 1; i += 2) {
        sum += 2 * f(a + i * h);
    }
    return sum * h / 3.0;
}

int main() {
    double a = 2.0 / M_PI;
    double b = 1000.0; // Заменяем +бесконечность на большое число
    int n = 1000; // Начальное количество разбиений

    // Вычисление интегралов
    double integralRect = rectangleMethod(a, b, n);
    double integralTrap = trapezoidMethod(a, b, n);
    double integralSimpson = simpsonMethod(a, b, n);

    // Вывод результатов
    std::cout << std::fixed << std::setprecision(6);
    std::cout << "Метод прямоугольников: " << integralRect << std::endl;
    std::cout << "Метод трапеций: " << integralTrap << std::endl;
    std::cout << "Метод Симпсона: " << integralSimpson << std::endl;

    return 0;
}
